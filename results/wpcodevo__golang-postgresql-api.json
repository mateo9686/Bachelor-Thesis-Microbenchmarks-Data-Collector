{
  "Name": "wpcodevo/golang-postgresql-api",
  "Path": "./repositories/wpcodevo__golang-postgresql-api",
  "GoVersion": "1.18",
  "BenchmarkData": {
    "timestamp": "2023-10-23T21:51:19Z",
    "benchmarkCount": 0,
    "benchmarkSuiteCount": 0,
    "successfulBenchmarkCount": 0,
    "successfulBenchmarkSuitesCount": 0,
    "goos": "n/a",
    "goarch": "n/a",
    "suites": []
  },
  "GitRepo": {
    "full_name": "wpcodevo/golang-postgresql-api",
    "name": "golang-postgresql-api",
    "private": false,
    "html_url": "https://github.com/wpcodevo/golang-postgresql-api",
    "description": "This article will teach you how to set up a SQLC API project with Golang, standard Database/SQL package, Gin Gonic, PostgreSQL, Golang-migrate, and Docker-compose. You will also learn how to generate Golang database CRUD functions and Structs with the SQLC compiler. The SQLC Golang API will use a PostgreSQL database and run on the Gin Gonic HTTP server. We will use the Golang-migrate package to push the SQL schema to the database.",
    "fork": false,
    "created_at": "2022-06-24T19:11:18Z",
    "updated_at": "2023-10-15T00:48:22Z",
    "pushed_at": "2022-10-02T15:34:53Z",
    "ssh_url": "git@github.com:wpcodevo/golang-postgresql-api.git",
    "homepage": "https://codevoweb.com/api-golang-postgresql-sqlc-gin-gonic-project-setup",
    "stargazers_count": 30,
    "watchers_count": 30,
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "has_discussions": false,
    "forks": 2,
    "language": "Go",
    "archived": false,
    "disabled": false,
    "open_issues": 0,
    "topics": [
      "gin",
      "go",
      "golang",
      "jwt",
      "postgresql"
    ],
    "allow_forking": true,
    "is_template": false,
    "cloning_error": "",
    "score": 1,
    "license": {
      "key": "",
      "name": "",
      "node_id": "",
      "html_url": ""
    }
  },
  "CodeStatistics": {
    "Count": 8,
    "Lines": 544,
    "Blank": 76,
    "Code": 458,
    "Comment": 10,
    "Bytes": 13113,
    "Complexity": 73
  }
}